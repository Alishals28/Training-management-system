TYPE=VIEW
query=with recursive numbers as (select 1 AS `n` union all select `numbers`.`n` + 1 AS `n + 1` from `numbers` where `numbers`.`n` < (select greatest(max(`counts`.`task_count_g`),max(`counts`.`task_count_t`)) from (select `jp`.`JobPosition` AS `JobPosition`,count(distinct `g`.`JobGTaskCode`) AS `task_count_g`,count(distinct `t`.`JobTTask`) AS `task_count_t` from ((`training_program2`.`cat_jobposition` `jp` left join `training_program2`.`x_jobposition_jobgtask` `g` on(`jp`.`JobPosition` = `g`.`JobPosition`)) left join `training_program2`.`x_jobposition_jobttask` `t` on(`jp`.`JobPosition` = `t`.`JobPosition`)) group by `jp`.`JobPosition`) `counts`)), GeneralTasks as (select `jp`.`JobPosition` AS `JobPosition`,`g`.`JobGTaskCode` AS `JobGTaskCode`,row_number() over ( partition by `jp`.`JobPosition` order by `g`.`JobGTaskCode`) AS `rn` from (`training_program2`.`cat_jobposition` `jp` left join `training_program2`.`x_jobposition_jobgtask` `g` on(`jp`.`JobPosition` = `g`.`JobPosition`))), TechnicalTasks as (select `jp`.`JobPosition` AS `JobPosition`,`t`.`JobTTask` AS `JobTTask`,row_number() over ( partition by `jp`.`JobPosition` order by `t`.`JobTTask`) AS `rn` from (`training_program2`.`cat_jobposition` `jp` left join `training_program2`.`x_jobposition_jobttask` `t` on(`jp`.`JobPosition` = `t`.`JobPosition`)))select `p`.`JobPosition` AS `JobPosition`,`g`.`JobGTaskCode` AS `General_Task`,`t`.`JobTTask` AS `Technical_Task` from (((`training_program2`.`cat_jobposition` `p` join `numbers` `n`) left join `generaltasks` `g` on(`p`.`JobPosition` = `g`.`JobPosition` and `n`.`n` = `g`.`rn`)) left join `technicaltasks` `t` on(`p`.`JobPosition` = `t`.`JobPosition` and `n`.`n` = `t`.`rn`)) where `g`.`JobGTaskCode` is not null or `t`.`JobTTask` is not null order by `p`.`JobPosition`,`n`.`n`
md5=f60aebb550467b85bb782402fd17cf5c
updatable=0
algorithm=0
definer_user=root
definer_host=localhost
suid=2
with_check_option=0
timestamp=0001752747254347820
create-version=2
source=WITH RECURSIVE numbers AS (\n    SELECT 1 as n\n    UNION ALL\n    SELECT n + 1 \n    FROM numbers \n    WHERE n < (\n        SELECT GREATEST(\n            MAX(task_count_g),\n            MAX(task_count_t)\n        )\n        FROM (\n            SELECT \n                jp.JobPosition,\n                COUNT(DISTINCT g.JobGTaskCode) as task_count_g,\n                COUNT(DISTINCT t.JobTTask) as task_count_t\n            FROM cat_jobposition jp\n            LEFT JOIN x_jobposition_jobgtask g ON jp.JobPosition = g.JobPosition\n            LEFT JOIN x_jobposition_jobttask t ON jp.JobPosition = t.JobPosition\n            GROUP BY jp.JobPosition\n        ) counts\n    )\n),\nGeneralTasks AS (\n    SELECT \n        jp.JobPosition,\n        g.JobGTaskCode,\n        ROW_NUMBER() OVER (PARTITION BY jp.JobPosition ORDER BY g.JobGTaskCode) as rn\n    FROM cat_jobposition jp\n    LEFT JOIN x_jobposition_jobgtask g ON jp.JobPosition = g.JobPosition\n),\nTechnicalTasks AS (\n    SELECT \n        jp.JobPosition,\n        t.JobTTask,\n        ROW_NUMBER() OVER (PARTITION BY jp.JobPosition ORDER BY t.JobTTask) as rn\n    FROM cat_jobposition jp\n    LEFT JOIN x_jobposition_jobttask t ON jp.JobPosition = t.JobPosition\n)\nSELECT \n    p.JobPosition,\n    g.JobGTaskCode as General_Task,\n    t.JobTTask as Technical_Task\nFROM cat_jobposition p\nCROSS JOIN numbers n\nLEFT JOIN GeneralTasks g ON p.JobPosition = g.JobPosition AND n.n = g.rn\nLEFT JOIN TechnicalTasks t ON p.JobPosition = t.JobPosition AND n.n = t.rn\nWHERE g.JobGTaskCode IS NOT NULL OR t.JobTTask IS NOT NULL\nORDER BY p.JobPosition, n.n
client_cs_name=utf8mb4
connection_cl_name=utf8mb4_unicode_ci
view_body_utf8=with recursive numbers as (select 1 AS `n` union all select `numbers`.`n` + 1 AS `n + 1` from `numbers` where `numbers`.`n` < (select greatest(max(`counts`.`task_count_g`),max(`counts`.`task_count_t`)) from (select `jp`.`JobPosition` AS `JobPosition`,count(distinct `g`.`JobGTaskCode`) AS `task_count_g`,count(distinct `t`.`JobTTask`) AS `task_count_t` from ((`training_program2`.`cat_jobposition` `jp` left join `training_program2`.`x_jobposition_jobgtask` `g` on(`jp`.`JobPosition` = `g`.`JobPosition`)) left join `training_program2`.`x_jobposition_jobttask` `t` on(`jp`.`JobPosition` = `t`.`JobPosition`)) group by `jp`.`JobPosition`) `counts`)), GeneralTasks as (select `jp`.`JobPosition` AS `JobPosition`,`g`.`JobGTaskCode` AS `JobGTaskCode`,row_number() over ( partition by `jp`.`JobPosition` order by `g`.`JobGTaskCode`) AS `rn` from (`training_program2`.`cat_jobposition` `jp` left join `training_program2`.`x_jobposition_jobgtask` `g` on(`jp`.`JobPosition` = `g`.`JobPosition`))), TechnicalTasks as (select `jp`.`JobPosition` AS `JobPosition`,`t`.`JobTTask` AS `JobTTask`,row_number() over ( partition by `jp`.`JobPosition` order by `t`.`JobTTask`) AS `rn` from (`training_program2`.`cat_jobposition` `jp` left join `training_program2`.`x_jobposition_jobttask` `t` on(`jp`.`JobPosition` = `t`.`JobPosition`)))select `p`.`JobPosition` AS `JobPosition`,`g`.`JobGTaskCode` AS `General_Task`,`t`.`JobTTask` AS `Technical_Task` from (((`training_program2`.`cat_jobposition` `p` join `numbers` `n`) left join `generaltasks` `g` on(`p`.`JobPosition` = `g`.`JobPosition` and `n`.`n` = `g`.`rn`)) left join `technicaltasks` `t` on(`p`.`JobPosition` = `t`.`JobPosition` and `n`.`n` = `t`.`rn`)) where `g`.`JobGTaskCode` is not null or `t`.`JobTTask` is not null order by `p`.`JobPosition`,`n`.`n`
mariadb-version=100432
